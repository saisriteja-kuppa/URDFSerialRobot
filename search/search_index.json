{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Cobot/","text":"Serial Robots Checking the tree of the Robot command to run to check if the urdf file is named in a proper convection is check_urdf filename.urdf this will provide a tree of all the links in your urdf file, it only check if the urdf file is present in a proper format, it doesnot care about the path you gave for meshes, to check if the meshes are proper aligned use RViz. Robotic Structure I have changed the robot base axis of rotation(z) for proper orientation to match with IKFast and translation with modification in the end effector of the robot. Elfin Robot The tree of the URDF file robot name is: elfin5 ---------- Successfully Parsed XML --------------- root Link: world has 1 child(ren) child(1): elfin_base_link child(1): elfin_base child(1): elfin_link1 child(1): elfin_link2 child(1): elfin_link3 child(1): elfin_link4 child(1): elfin_link5 child(1): elfin_link6 child(1): elfin_end_link roslaunch urdf_tutorial display.launch model:=elfin5.urdf Changes in Elfin Robot Correction in orientation is done by roatating the base with 90 degress in z axis and the offset in translation is made at the end effector. <link name=\"world\"/> <joint name=\"world_base\" type=\"fixed\"> <origin rpy=\"0 0 1.57\" xyz=\"0 0 0\"/> #rotated robot in z axis <parent link=\"world\"/> <child link=\"elfin_base_link\"/> </joint> <joint name=\"elfin_end_joint\" type=\"fixed\"> # modified the value of y offset <origin rpy=\"1.57079632679 1.57079632679 0\" xyz=\"0 -0.04827 0\"/> <parent link=\"elfin_link6\"/> <child link=\"elfin_end_link\"/> </joint>","title":"Collab Robots"},{"location":"Cobot/#serial-robots","text":"","title":"Serial Robots"},{"location":"Cobot/#checking-the-tree-of-the-robot","text":"command to run to check if the urdf file is named in a proper convection is check_urdf filename.urdf this will provide a tree of all the links in your urdf file, it only check if the urdf file is present in a proper format, it doesnot care about the path you gave for meshes, to check if the meshes are proper aligned use RViz.","title":"Checking the tree of the Robot"},{"location":"Cobot/#robotic-structure","text":"I have changed the robot base axis of rotation(z) for proper orientation to match with IKFast and translation with modification in the end effector of the robot.","title":"Robotic Structure"},{"location":"Cobot/#elfin-robot","text":"The tree of the URDF file robot name is: elfin5 ---------- Successfully Parsed XML --------------- root Link: world has 1 child(ren) child(1): elfin_base_link child(1): elfin_base child(1): elfin_link1 child(1): elfin_link2 child(1): elfin_link3 child(1): elfin_link4 child(1): elfin_link5 child(1): elfin_link6 child(1): elfin_end_link roslaunch urdf_tutorial display.launch model:=elfin5.urdf","title":"Elfin Robot"},{"location":"Cobot/#changes-in-elfin-robot","text":"Correction in orientation is done by roatating the base with 90 degress in z axis and the offset in translation is made at the end effector. <link name=\"world\"/> <joint name=\"world_base\" type=\"fixed\"> <origin rpy=\"0 0 1.57\" xyz=\"0 0 0\"/> #rotated robot in z axis <parent link=\"world\"/> <child link=\"elfin_base_link\"/> </joint> <joint name=\"elfin_end_joint\" type=\"fixed\"> # modified the value of y offset <origin rpy=\"1.57079632679 1.57079632679 0\" xyz=\"0 -0.04827 0\"/> <parent link=\"elfin_link6\"/> <child link=\"elfin_end_link\"/> </joint>","title":"Changes in Elfin Robot"},{"location":"IndustrialRobot/","text":"Industrial Robot Since Cobots comes with ROS support simple changes can accomplish the task we wanted to do. But for some industrial robots all you get is a mesh files and a CAD designer would help you primarily to build a urdf file with proper location(not probably orientation) for each link and joint. So one have to tweet the values of the origin for the robot, to proceed for the IKFast solution. Kuka Robot One way to debug the values is to know the entire forward kinematics of the robot. We have pytransforms3d package to visuvalize the robot and get the specific information of the robot. The tree shown below is the raw format we got from the CAD file root Link: base_link has 1 child(ren) child(1): Link_1 child(1): Link_2 child(1): Link_3 child(1): Link_4 child(1): Link_5 child(1): Link_6 The root link is the base_link, it is highly recommend to be a world attached to the robot, so you can visuvalize it neatly. -----------------------------------add in the URDF file <link name=\"world\"/> <joint name=\"world_base\" type=\"fixed\"> <origin rpy=\"-1.57 0 0\" xyz=\"0 0 0\"/> <parent link=\"world\"/> <child link=\"base_link\"/> </joint> The new tree looks like this. robot name is: KUKA_ASMLY ---------- Successfully Parsed XML --------------- root Link: world has 1 child(ren) child(1): base_link child(1): Link_1 child(1): Link_2 child(1): Link_3 child(1): Link_4 child(1): Link_5 child(1): Link_6 Visuval the Robot The below code requries pytransform3d to be installed and I am using python 2, should work for python 3. This code helps to visuvalize the urdf in matplotlib, but the graphics in matplot isnt,great so one can opt for using urdfpy as an alternative for this, since it used open3d software its easy to play with it. Pytransforms3d import os import numpy as np import matplotlib.pyplot as plt from pytransform3d.urdf import UrdfTransformManager data_dir = \"kuka/meshes/\" tm = UrdfTransformManager() filename = os.path.join(data_dir, \"KUKA_ASMLY\") with open(filename, \"r\") as f: robot_urdf = f.read() tm.load_urdf(robot_urdf, mesh_path=data_dir) tm.plot_visuals(\"KUKA_ASMLY\", ax_s=0.6, alpha=0.7) plt.show() urdfpy from urdfpy import URDF import numpy as np np.set_printoptions(formatter={'float': lambda x: \"{0:0.3f}\".format(x)}) robot = URDF.load('kuka.urdf') robot.show() Kuka Forward Kinematics Checker The below code helps to give forward kinematics for everylink in the kuka robot. From the forward kinematics you can model the robots urdf file, since fk can be done easily from the dh table, from a proper urdf file the Ikfast takes care of the IK. pytransform3d import os import numpy as np import matplotlib.pyplot as plt from pytransform3d.urdf import UrdfTransformManager data_dir = \"kuka/meshes/\" tm = UrdfTransformManager() filename = os.path.join(data_dir, \"KUKA_ASMLY\") with open(filename, \"r\") as f: robot_urdf = f.read() tm.load_urdf(robot_urdf, mesh_path=data_dir) link_names = [] for linkname in link_names: #print(get_transform(from_frame, to_frame)) print(get_transform('world',linkname)) tm.plot_visuals(\"KUKA_ASMLY\", ax_s=0.6, alpha=0.7) plt.show() urdfpy from urdfpy import URDF import numpy as np np.set_printoptions(formatter={'float': lambda x: \"{0:0.3f}\".format(x)}) robot = URDF.load('kuka_copy.urdf') # for joint in robot.actuated_joints: # print(joint.name) # for link in robot.links: # print(link.name) #home position angs = [ 0., -1.57,0, 0,0,0 ] configur = dict(zip(['Joint_{}'.format(i) for i in range(6)], angs)) print(configur) # fk = robot.link_fk() fk = robot.link_fk(cfg=configur) for i in range(8): print('name is {}'.format(robot.links[i].name)) print(fk[robot.links[i]]) print('------------------------') # robot.show(cfg=configur)","title":"Industrial Robot"},{"location":"IndustrialRobot/#industrial-robot","text":"Since Cobots comes with ROS support simple changes can accomplish the task we wanted to do. But for some industrial robots all you get is a mesh files and a CAD designer would help you primarily to build a urdf file with proper location(not probably orientation) for each link and joint. So one have to tweet the values of the origin for the robot, to proceed for the IKFast solution.","title":"Industrial Robot"},{"location":"IndustrialRobot/#kuka-robot","text":"One way to debug the values is to know the entire forward kinematics of the robot. We have pytransforms3d package to visuvalize the robot and get the specific information of the robot. The tree shown below is the raw format we got from the CAD file root Link: base_link has 1 child(ren) child(1): Link_1 child(1): Link_2 child(1): Link_3 child(1): Link_4 child(1): Link_5 child(1): Link_6 The root link is the base_link, it is highly recommend to be a world attached to the robot, so you can visuvalize it neatly. -----------------------------------add in the URDF file <link name=\"world\"/> <joint name=\"world_base\" type=\"fixed\"> <origin rpy=\"-1.57 0 0\" xyz=\"0 0 0\"/> <parent link=\"world\"/> <child link=\"base_link\"/> </joint> The new tree looks like this. robot name is: KUKA_ASMLY ---------- Successfully Parsed XML --------------- root Link: world has 1 child(ren) child(1): base_link child(1): Link_1 child(1): Link_2 child(1): Link_3 child(1): Link_4 child(1): Link_5 child(1): Link_6","title":"Kuka Robot"},{"location":"IndustrialRobot/#visuval-the-robot","text":"The below code requries pytransform3d to be installed and I am using python 2, should work for python 3. This code helps to visuvalize the urdf in matplotlib, but the graphics in matplot isnt,great so one can opt for using urdfpy as an alternative for this, since it used open3d software its easy to play with it. Pytransforms3d import os import numpy as np import matplotlib.pyplot as plt from pytransform3d.urdf import UrdfTransformManager data_dir = \"kuka/meshes/\" tm = UrdfTransformManager() filename = os.path.join(data_dir, \"KUKA_ASMLY\") with open(filename, \"r\") as f: robot_urdf = f.read() tm.load_urdf(robot_urdf, mesh_path=data_dir) tm.plot_visuals(\"KUKA_ASMLY\", ax_s=0.6, alpha=0.7) plt.show() urdfpy from urdfpy import URDF import numpy as np np.set_printoptions(formatter={'float': lambda x: \"{0:0.3f}\".format(x)}) robot = URDF.load('kuka.urdf') robot.show()","title":"Visuval the Robot"},{"location":"IndustrialRobot/#kuka-forward-kinematics-checker","text":"The below code helps to give forward kinematics for everylink in the kuka robot. From the forward kinematics you can model the robots urdf file, since fk can be done easily from the dh table, from a proper urdf file the Ikfast takes care of the IK. pytransform3d import os import numpy as np import matplotlib.pyplot as plt from pytransform3d.urdf import UrdfTransformManager data_dir = \"kuka/meshes/\" tm = UrdfTransformManager() filename = os.path.join(data_dir, \"KUKA_ASMLY\") with open(filename, \"r\") as f: robot_urdf = f.read() tm.load_urdf(robot_urdf, mesh_path=data_dir) link_names = [] for linkname in link_names: #print(get_transform(from_frame, to_frame)) print(get_transform('world',linkname)) tm.plot_visuals(\"KUKA_ASMLY\", ax_s=0.6, alpha=0.7) plt.show() urdfpy from urdfpy import URDF import numpy as np np.set_printoptions(formatter={'float': lambda x: \"{0:0.3f}\".format(x)}) robot = URDF.load('kuka_copy.urdf') # for joint in robot.actuated_joints: # print(joint.name) # for link in robot.links: # print(link.name) #home position angs = [ 0., -1.57,0, 0,0,0 ] configur = dict(zip(['Joint_{}'.format(i) for i in range(6)], angs)) print(configur) # fk = robot.link_fk() fk = robot.link_fk(cfg=configur) for i in range(8): print('name is {}'.format(robot.links[i].name)) print(fk[robot.links[i]]) print('------------------------') # robot.show(cfg=configur)","title":"Kuka Forward Kinematics Checker"},{"location":"SimpleExample/","text":"Desinging 2 DOF Robot Simple Cylinder in Rviz A Basic Cylinder in Rviz FileName twodof.urdf roslaunch urdf_tutorial display.launch model:=twodof.urdf <?xml version=\"1.0\"?> # name of the robot <robot name=\"myfirst\"> #name of the link <link name=\"base_link\"> #visual tag to see the robot in the rviz <visual> # geometry defines about the type of the object <geometry> <cylinder length=\"0.6\" radius=\"0.2\"/> </geometry> </visual> </link> </robot> Adding Links with Joints Adding a Joint between 2 links FileName jointlink.urdf roslaunch urdf_tutorial display.launch model:=jointlink.urdf # name of the joint and type of the joint <joint name=\"base_to_link1\" type=\"fixed\"> #parent name <parent link=\"base_link\"/> #child name <child link=\"link1\"/> </joint> Location of the Joint and links Properly Locating the Joints and the Links FileName locations.urdf roslaunch urdf_tutorial display.launch model:=locations.urdf <robot name=\"JointLinks\"> <link name=\"base_link\"> <visual> <geometry> <cylinder length=\"0.3\" radius=\"0.2\"/> </geometry> </visual> </link> <link name=\"link1\"> <visual> <geometry> <cylinder length=\"0.6\" radius=\"0.2\"/> </geometry> # location of the link <origin rpy=\"0 0 0\" xyz=\"0 0 0.3\"/> </visual> </link> <joint name=\"base_to_right_leg\" type=\"fixed\"> <parent link=\"base_link\"/> <child link=\"link1\"/> #location of the Joint <origin rpy=\"0 1.57075 0\" xyz=\"0 0 0.6\"/> </joint> </robot> Colour the Robot Properly Locating the Joints and the Links FileName color.urdf roslaunch urdf_tutorial display.launch model:=color.urdf <material name=\"blue\"> <color rgba=\"0 0 0.8 1\"/> </material> <material name=\"white\"> <color rgba=\"1 1 1 1\"/> </material> Flexiblity in the Joints FileName flexible.urdf <joint name=\"base_to_right_leg\" type=\"revolute\"> # add the axis of rotation and change the sign for clock and viceversa <axis xyz=\"1 0 0\"/> # limits and speed of the revolution joint <limit effort=\"1000.0\" lower=\"0.0\" upper=\"6.28\" velocity=\"0.5\"/> <parent link=\"base_link\"/> <child link=\"link1\"/> <origin rpy=\"0 1.57075 0\" xyz=\"0 0 0.6\"/> </joint> </robot> Physics Properties File Collision.urdf <collision> <geometry> <cylinder length=\"0.6\" radius=\"0.2\"/> </geometry> </collision> <inertial> <mass value=\"10\"/> <inertia ixx=\"1.0\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"1.0\" iyz=\"0.0\" izz=\"1.0\"/> </inertial>","title":"Introduction"},{"location":"SimpleExample/#desinging-2-dof-robot","text":"","title":"Desinging 2 DOF Robot"},{"location":"SimpleExample/#simple-cylinder-in-rviz","text":"A Basic Cylinder in Rviz FileName twodof.urdf roslaunch urdf_tutorial display.launch model:=twodof.urdf <?xml version=\"1.0\"?> # name of the robot <robot name=\"myfirst\"> #name of the link <link name=\"base_link\"> #visual tag to see the robot in the rviz <visual> # geometry defines about the type of the object <geometry> <cylinder length=\"0.6\" radius=\"0.2\"/> </geometry> </visual> </link> </robot>","title":"Simple Cylinder in Rviz"},{"location":"SimpleExample/#adding-links-with-joints","text":"Adding a Joint between 2 links FileName jointlink.urdf roslaunch urdf_tutorial display.launch model:=jointlink.urdf # name of the joint and type of the joint <joint name=\"base_to_link1\" type=\"fixed\"> #parent name <parent link=\"base_link\"/> #child name <child link=\"link1\"/> </joint>","title":"Adding Links with Joints"},{"location":"SimpleExample/#location-of-the-joint-and-links","text":"Properly Locating the Joints and the Links FileName locations.urdf roslaunch urdf_tutorial display.launch model:=locations.urdf <robot name=\"JointLinks\"> <link name=\"base_link\"> <visual> <geometry> <cylinder length=\"0.3\" radius=\"0.2\"/> </geometry> </visual> </link> <link name=\"link1\"> <visual> <geometry> <cylinder length=\"0.6\" radius=\"0.2\"/> </geometry> # location of the link <origin rpy=\"0 0 0\" xyz=\"0 0 0.3\"/> </visual> </link> <joint name=\"base_to_right_leg\" type=\"fixed\"> <parent link=\"base_link\"/> <child link=\"link1\"/> #location of the Joint <origin rpy=\"0 1.57075 0\" xyz=\"0 0 0.6\"/> </joint> </robot>","title":"Location of the Joint and links"},{"location":"SimpleExample/#colour-the-robot","text":"Properly Locating the Joints and the Links FileName color.urdf roslaunch urdf_tutorial display.launch model:=color.urdf <material name=\"blue\"> <color rgba=\"0 0 0.8 1\"/> </material> <material name=\"white\"> <color rgba=\"1 1 1 1\"/> </material>","title":"Colour the Robot"},{"location":"SimpleExample/#flexiblity-in-the-joints","text":"FileName flexible.urdf <joint name=\"base_to_right_leg\" type=\"revolute\"> # add the axis of rotation and change the sign for clock and viceversa <axis xyz=\"1 0 0\"/> # limits and speed of the revolution joint <limit effort=\"1000.0\" lower=\"0.0\" upper=\"6.28\" velocity=\"0.5\"/> <parent link=\"base_link\"/> <child link=\"link1\"/> <origin rpy=\"0 1.57075 0\" xyz=\"0 0 0.6\"/> </joint> </robot>","title":"Flexiblity in the Joints"},{"location":"SimpleExample/#physics-properties","text":"File Collision.urdf <collision> <geometry> <cylinder length=\"0.6\" radius=\"0.2\"/> </geometry> </collision> <inertial> <mass value=\"10\"/> <inertia ixx=\"1.0\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"1.0\" iyz=\"0.0\" izz=\"1.0\"/> </inertial>","title":"Physics Properties"},{"location":"basic/","text":"URDF Tutorial What is URDF and Why? What Universal Robot Description File is a file that is in used in ROS to build a robot for simulations purposes in RViz and Other softwares even. Why The main things that you require to build a robot at high accuracy is to specifically locate the values of the translations and rotations of the robot for each link. Remember that if the IKFast priduces any devaitaion from the values of the teach pendent, then the URDF is to be remodeled. Necessary Intsalltions python 2.7 * RViz * Pytransforms3d python 3 * urdfpy","title":"Basics of URDF"},{"location":"basic/#urdf-tutorial","text":"","title":"URDF Tutorial"},{"location":"basic/#what-is-urdf-and-why","text":"What Universal Robot Description File is a file that is in used in ROS to build a robot for simulations purposes in RViz and Other softwares even. Why The main things that you require to build a robot at high accuracy is to specifically locate the values of the translations and rotations of the robot for each link. Remember that if the IKFast priduces any devaitaion from the values of the teach pendent, then the URDF is to be remodeled.","title":"What is URDF and Why?"},{"location":"basic/#necessary-intsalltions","text":"python 2.7 * RViz * Pytransforms3d python 3 * urdfpy","title":"Necessary Intsalltions"}]}